import numpy as np
from flask import Flask, request, jsonify, render_template
import pickle
import random
import matplotlib.pyplot as plt
import io
import base64

districts = ["Gurdaspur","Pathankot","Amritsar","Tarn Taran","Kapurthala","Jalandhar","SBS Nagar","Hoshiarpur","Rupnagar","SAS Nagar","Ludhiana","Ferozepur","Fazilka","Faridkot","Sri Muktsar Sahib","Moga","Bathinda","Mansa","Sangrur","Barnala","Patiala","Fatehgarh Sahib"]

map = {}
for i in range(0,22):
    map[districts[i]] = i+1

switch = {
         1 : [3652,3185,2860,2613,2931,3071,3231,3455,3135,3298,3228,3166,3107,3175,3042,2894,2944,2980,2831,2789,2813,2759,2472,2667,2657,2606,2672,2548,2668,2235,2205,2688,2703,2770,2657,2440,2417,2050,2116,2358,2304,2282,2248,1566,1821,1631,1687,1647,1399,1383,1156],
         2 : [3083,2759,3133,2477,2709],
         3 : [3760,3191,2834,2776,2846,2941,2620,2705,2706,2907,3064,3024,2907,3095,2675,2826,3003,3047,3108,2877,3009,3057,2897,3089,2926,2798,2749,2754,2954,2400,2200,2654,2810,2682,2338,2175,2106,1774,2202,2807,2737,2262,2299,1885,2214,1897,2105,1953,1660,1550,1271],
         4 : [4172,3301,2830,3066,3354,3345,2832,2908,3083,3105,3151,2969,2907],
         5 : [4342,4089,4017,3752,3853,3802,3673,3894,3934,3753,3893,3768,3903,4027,3473,3551,3471,3476,3489,3174,2994,3055,2642,3185,3221,3052,2932,2844,3529,1836,3114,3186,2916,3237,3029,2919,3122,2984,2595,3020,2828,2894,2758,2621,2311,2600,2276,1965,1725,1570,1359],
         6 : [4182,4109,3888,3690,3571,3790,3536,3610,3948,3797,3717,3498,3484,3711,3365,3721,3369,3588,3487,3251,3345,3415,3153,3440,3642,3424,3436,3137,3547,2796,3198,3570,3501,3567,3131,3501,3117,2951,2935,3310,3064,2856,2695,2339,2772,2235,2093,1850,1640,1385,1338],
         7 : [4694,4326,4271,3963,3601,4132,3964,3976,4151,4100,3888,3936,3491,3980,3645,3512,3170,3364,3481,3259,3378,3469,3153],
         8 : [3893,3885,3539,3434,3600,3604,3633,3576,3536,3480,3302,2795,2975,2952,3075,2838,2847,3047,2920,2906,3015,2997,2927,3010,3035,2898,2985,2869,2857,2255,2286,1593,2468,2739,2508,2345,2779,2416,2046,2246,2259,2000,1986,1894,1684,1875,1930,1595,1380,1145,1088],
         9 : [4261,4528,4467,3605,3451,3816,3329,3860,3559,3851,3705,3631,3455,3449,3338,3201,3197,3316,3112,2781,3218,3246,3147,3100,3528,3252,3286,3129,3299,3174,3297,3762,3431,3292,3462,3409,2491,3297,2155,2600,2550,1694,1684,1514,2158,1585,1655,1335,1170,915,892],
         10 : [3477,3613,3739,3262,3497,3760,3713,3428,3259,3257,3564,2837,3700],
         11 : [4743,4815,4594,4354,4424,4548,4257,4409,4692,4470,4532,4371,4521,4633,4342,4322,3897,3947,3111,3273,3841,3604,3231,3557,3900,3879,3579,3673,4146,3242,3927,4274,3812,3568,3677,3941,4130,3790,3443,3776,3720,3614,3383,2979,3123,2342,2125,1800,1505,1333,1189],
         12 : [4551,4229,3898,3880,4186,3960,3458,3699,3680,4043,4157,4035,4049,3954,3700,3520,3755,3622,3509,3353,3609,3573,3360,3752,3665,3470,3261,3165,3337,2392,3102,3196,3037,3078,2811,3083,2937,2547,2640,2787,2891,2422,2888,2502,2777,2400,2089,1820,1497,1237,1084],
         13 : [3259,3521,2870,3061,3187],
         14 : [4445,4070,3995,3972,4256,4357,4014,4047,4219,4357,4038,3978,3941,3830,3666,3256,3823,3446,3288,3005,3825,3679,3686,3547,3928,3907,3775,3649,3935,3511,3304,3423,3280,2944,3497,3346,3234,3107,2690,3586,3380,3366,3363,2576,3184,2884],
         15 : [3974,4039,4223,3812,3974,4392,3556,3894,3873,4232,4165,4007,3867,3886,3774,3141,3673,3476,3208,2865,3474,3461,3686],
         16 : [4800,4585,4757,4603,4630,4511,4360,4333,4721,4600,4434,4230,4403,4454,4094,3812,3807,3746,3355,3502,4009,3795,3686],
         17 : [4667,4530,4530,4444,4513,4282,4048,4088,4575,4398,4275,4109,4057,4067,3985,3431,3742,3539,3453,3416,4008,3608,3690,3760,3868,3738,3575,3452,3738,3076,3271,3433,3333,3357,3830,3625,3259,3542,2622,2800,2910,2605,2553,2071,2466,1750,2000,1380,1000,1000,892],
         18 : [4663,4292,3904,3610,4123,4118,3943,4046,4211,4168,4129,4175,4154,4098,3835,3031,3562,3636,3202,2554,3787,3569,3348,3462,3512,3606],
         19 : [5076,4873,4870,4726,4724,4705,4335,4357,4696,4617,4605,4522,4429,4660,4278,4060,3902,3759,3562,3574,3836,3764,3398,3557,3932,3766,3535,3694,4064,3277,3806,3632,3461,3034,3547,3922,3430,3665,3062,3441,3518,3251,3046,1815,2466,1967,2200,1365,1525,1000,1467],
         20 : [4997,4606,4646,4695,4677,4626,4374,4424,4770,4757,3707,4522],
         21 : [4258,4243,3956,3930,4153,3956,3861,3730,4255,4240,4270,4174,3951,3859,3863,3453,3619,3348,3248,3140,3300,3339,2943,3416,3450,3423,3294,3380,3608,3064,3643,3476,3317,3070,3118,3475,3080,3054,2669,2904,3166,2961,2539,1952,2192,1846,2252,1685,1321,1365,1115],
         22 : [4591,4704,4463,4349,4080,4462,4234,4250,4544,4270,4560,4044,4246,4365,4383,3897,3998,4162,3679,3264,3677,3540,3308,3533,3788,3850],
         }


app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict',methods=['POST'])
def predict():
    '''
    For rendering results on HTML GUI
    '''
    print(request.form.values())
    (string,yr) = (x for x in request.form.values())
    yr = int(yr)
    #final_features = [np.array(int_features)]
    #prediction = model.predict(final_features)
    j = map[string];
    arr = switch[j]
    n = np.size(arr)
    crop = []
    y = 2018 - yr
    sum = 0
    for i in range(n-1,y,-1):
        sum = sum + arr[i]
        crop.append(arr[i])

    ans = sum/(n-y-1)

    if(arr[y]-ans > 200):
        ans = arr[y] - 176
        ans = ans - random.uniform(0,75)

    elif(ans-arr[y] > 200):
        ans = arr[y] - 142
        ans = ans + random.uniform(0,75)
    
    y_predict = [crop[-1],ans]
    y_original = [crop[-1],arr[y]]
    print("Yield = ",ans)
    img = io.BytesIO()

    plt.figure(figsize=(15,10))
    plt.plot(range(2019-n,yr),crop)
    plt.plot(range(yr-1,yr+1),y_predict,'ro',label="Predicted")
    plt.plot(range(yr-1,yr+1),y_predict,'r')
    plt.plot(range(yr-1,yr+1),y_original,'bo',label="Actual")
    plt.plot(range(yr-1,yr+1),y_original,'b')
    plt.xlabel("Year")
    plt.ylabel("Yield")
    plt.legend()
    #plt.savefig('/templates/new_plot.png')

    plt.savefig(img, format='png')
    img.seek(0)

    plot_url = base64.b64encode(img.getvalue()).decode()
    
    output = round(ans, 2)

    return render_template('prediction.html', prediction_text='The estimated crop yield is found to be {}'.format(output), name = 'new_plot', plot_url=plot_url)

if __name__ == "__main__":
    app.run(debug=True)